'use server';

import { db } from '@/app/lib/firebaseAdmin';
import { FieldValue, GeoPoint, Timestamp } from 'firebase-admin/firestore';
import { sendLineMessage } from '@/app/actions/lineActions';
import { sendTelegramMessageToAdmin } from '@/app/actions/telegramActions';

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏°‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏£‡∏ñ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {object} bookingData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
 * @returns {Promise<object>} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
 */
export async function createBookingWithCheck(bookingData) {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å bookingData
    const { vehicleId, pickupInfo, tripDetails, customerInfo, userInfo, paymentInfo, vehicleInfo } = bookingData;
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Object Date ‡∏Ç‡∏≠‡∏á JavaScript
    const requestedStartTime = new Date(pickupInfo.dateTime);
    const rentalHours = Number(tripDetails.rentalHours);
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    const requestedEndTime = new Date(requestedStartTime.getTime() + rentalHours * 60 * 60 * 1000);
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô Timestamp ‡∏Ç‡∏≠‡∏á Firestore ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ query
    const requestedEndTimestamp = Timestamp.fromDate(requestedEndTime);
    
    const bookingsRef = db.collection('bookings');

    try {
        // ‡πÉ‡∏ä‡πâ Transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        // ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πá‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        const transactionResult = await db.runTransaction(async (transaction) => {
            // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (Conflict Check)
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏Ñ‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            // ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏£‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î' ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á
            const conflictQuery = bookingsRef
                .where('vehicleId', '==', vehicleId)
                .where('status', 'in', ['pending', 'confirmed', 'assigned', 'stb', 'pickup'])
                .where('pickupInfo.dateTime', '<', requestedEndTimestamp);
            
            const conflictSnapshot = await transaction.get(conflictQuery);
            let isOverlapping = false;
            
            // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            conflictSnapshot.forEach(doc => {
                const existingBooking = doc.data();
                const bookingStartTime = existingBooking.pickupInfo.dateTime.toDate();
                const bookingRentalHours = Number(existingBooking.tripDetails.rentalHours);
                const bookingEndTime = new Date(bookingStartTime.getTime() + (bookingRentalHours * 60 * 60 * 1000));
                
                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (requested) ‡πÑ‡∏õ‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (booking) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (requestedStartTime < bookingEndTime && requestedEndTime > bookingStartTime) {
                    isOverlapping = true;
                }
            });

            // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô Error ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î Transaction
            if (isOverlapping) {
                throw new Error('‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏ñ‡∏Ñ‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà');
            }

            // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            const newBookingRef = bookingsRef.doc();
            transaction.set(newBookingRef, {
                ...bookingData,
                // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà Firestore ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÄ‡∏ä‡πà‡∏ô Timestamp, GeoPoint
                pickupInfo: {
                    ...bookingData.pickupInfo,
                    dateTime: Timestamp.fromDate(requestedStartTime),
                    latlng: new GeoPoint(bookingData.pickupInfo.latlng.latitude, bookingData.pickupInfo.latlng.longitude),
                },
                dropoffInfo: {
                    ...bookingData.dropoffInfo,
                    latlng: new GeoPoint(bookingData.dropoffInfo.latlng.latitude, bookingData.dropoffInfo.latlng.longitude),
                },
                createdAt: FieldValue.serverTimestamp(), // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å Server
                updatedAt: FieldValue.serverTimestamp(),
            });
            
            // 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô collection 'customers'
            const customerRef = db.collection("customers").doc(bookingData.userId);
            transaction.set(customerRef, {
                lineUserId: bookingData.userId,
                displayName: userInfo.displayName,
                name: customerInfo.name,
                pictureUrl: userInfo.pictureUrl || '',
                email: customerInfo.email,
                phone: customerInfo.phone,
                lastActivity: FieldValue.serverTimestamp()
            }, { merge: true }); // merge: true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà

            return { bookingId: newBookingRef.id };
        });

        // 4. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Transaction ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        const customerMessage = `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ñ ${vehicleInfo.brand} ${vehicleInfo.model} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì`;
        await sendLineMessage(bookingData.userId, customerMessage);
        
        const pickupLocationName = pickupInfo.name || pickupInfo.address;
        const adminMessage = `üîî ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà!\n\n*‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:* ${customerInfo.name}\n*‡∏£‡∏ñ:* ${vehicleInfo.brand} ${vehicleInfo.model}\n*‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà:* ${pickupLocationName}\n*‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î:* ${requestedStartTime.toLocaleString('th-TH')}\n*‡∏£‡∏≤‡∏Ñ‡∏≤:* ${paymentInfo.totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
        await sendTelegramMessageToAdmin(adminMessage);

        return { success: true, message: 'Booking created successfully!', id: transactionResult.bookingId };
    } catch (error) {
        console.error('Transaction failure:', error);
        return { success: false, error: error.message };
    }
}

/**
 * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞, ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 */
export async function cancelBookingByAdmin(bookingId, reason) {
    if (!bookingId || !reason) {
        return { success: false, error: '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Booking ID ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•' };
    }
    const bookingRef = db.collection('bookings').doc(bookingId);
    try {
        const resultForNotification = await db.runTransaction(async (transaction) => {
            const bookingDoc = await transaction.get(bookingRef);
            if (!bookingDoc.exists) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á!");
            
            const bookingData = bookingDoc.data();
            const driverId = bookingData.driverId;
            let driverDoc = null;
            let driverRef = null;

            if (driverId) {
                driverRef = db.collection('drivers').doc(driverId);
                driverDoc = await transaction.get(driverRef);
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 'cancelled'
            transaction.update(bookingRef, {
                status: 'cancelled',
                cancellationInfo: { cancelledBy: 'admin', reason, timestamp: FieldValue.serverTimestamp() },
                updatedAt: FieldValue.serverTimestamp()
            });

            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 'available' (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏±‡∏ö)
            if (driverRef && driverDoc && driverDoc.exists) {
                transaction.update(driverRef, { status: 'available' });
            }
            
            return { customerUserId: bookingData.userId, driverToNotify: driverDoc ? driverDoc.data() : null };
        });

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        if (resultForNotification.customerUserId) {
            const customerMessage = `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (ID: ${bookingId.substring(0, 6).toUpperCase()}) ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å: "${reason}"\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°`;
            await sendLineMessage(resultForNotification.customerUserId, customerMessage);
        }
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        const { driverToNotify } = resultForNotification;
        if (driverToNotify && driverToNotify.lineUserId) {
            const driverMessage = `‡∏á‡∏≤‡∏ô #${bookingId.substring(0, 6).toUpperCase()} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô\n‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: "${reason}"\n\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏±‡∏ö" ‡πÅ‡∏•‡πâ‡∏ß`;
            await sendLineMessage(driverToNotify.lineUserId, driverMessage);
        }
        return { success: true };
    } catch (error) {
        console.error("Error cancelling booking:", error);
        return { success: false, error: error.message };
    }
}

/**
 * ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
 */
export async function sendReviewRequestToCustomer(bookingId) {
    const bookingRef = db.collection('bookings').doc(bookingId);
    try {
        const bookingDoc = await bookingRef.get();
        if (!bookingDoc.exists) {
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á");
        }
        const bookingData = bookingDoc.data();

        if (bookingData.status !== 'completed') {
            throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô");
        }

        if (bookingData.reviewInfo?.submitted) {
            throw new Error("‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß");
        }

        if (!bookingData.userId) {
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö LINE User ID ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤");
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á LIFF URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        const reviewLiffUrl = `https://liff.line.me/${process.env.NEXT_PUBLIC_REVIEW_LIFF_ID}/${bookingId}`;
        const reviewMessage = `‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏™‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô\n${reviewLiffUrl}`;

        await sendLineMessage(bookingData.userId, reviewMessage);

        return { success: true };
    } catch (error) {
        console.error(`[Review Request] Error sending review request for booking ID ${bookingId}:`, error);
        return { success: false, error: error.message };
    }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö)
 */
export async function updateBookingStatusByDriver(bookingId, driverId, newStatus, note) {
    if (!bookingId || !driverId || !newStatus) {
        return { success: false, error: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Booking ID, Driver ID, ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà' };
    }
    const bookingRef = db.collection('bookings').doc(bookingId);
    const driverRef = db.collection('drivers').doc(driverId);

    let bookingDataForNotification = null;

    try {
        await db.runTransaction(async (transaction) => {
            const bookingDoc = await transaction.get(bookingRef);
            if (!bookingDoc.exists) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á!");

            bookingDataForNotification = bookingDoc.data();

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            transaction.update(bookingRef, {
                status: newStatus,
                statusHistory: FieldValue.arrayUnion({ status: newStatus, note: note || "", timestamp: Timestamp.now() }),
                updatedAt: FieldValue.serverTimestamp()
            });
            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (completed) ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏≤ (noshow) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 'available'
            if (newStatus === 'completed' || newStatus === 'noshow') {
                transaction.update(driverRef, { status: 'available' });
            }
        });
        
        // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ
        if (bookingDataForNotification && bookingDataForNotification.userId) {
            let customerMessage = '';
            switch (newStatus) {
                case 'stb':
                    customerMessage = `‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏±‡∏î‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á`;
                    break;
                case 'pickup':
                    customerMessage = `‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏ñ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏†‡∏≤‡∏û‡∏Ñ‡πà‡∏∞`;
                    break;
                case 'completed':
                    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏à‡∏∞‡∏™‡πà‡∏á 2 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ‡πÅ‡∏•‡∏∞ ‡∏Ç‡∏≠‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
                    const thankYouMessage = `‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ CARFORTHIP ‡∏Ñ‡πà‡∏∞`;
                    await sendLineMessage(bookingDataForNotification.userId, thankYouMessage);

                    const reviewLiffUrl = `https://liff.line.me/${process.env.NEXT_PUBLIC_REVIEW_LIFF_ID}/${bookingId}`;
                    const reviewMessage = `‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏™‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô\n${reviewLiffUrl}`;
                    await sendLineMessage(bookingDataForNotification.userId, reviewMessage);

                    customerMessage = ''; // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
                    break;
                case 'noshow':
                    customerMessage = `‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏ô‡∏±‡∏î‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ñ‡πà‡∏∞`;
                    break;
            }

            if (customerMessage) {
                await sendLineMessage(bookingDataForNotification.userId, customerMessage);
            }
        }

        return { success: true };
    } catch (error) {
        console.error("Error updating booking status:", error);
        return { success: false, error: error.message };
    }
}

/**
 * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á)
*/
export async function cancelBookingByUser(bookingId, userId) {
    if (!bookingId || !userId) {
        return { success: false, error: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Booking ID ‡πÅ‡∏•‡∏∞ User ID' };
    }
    const bookingRef = db.collection('bookings').doc(bookingId);
    try {
        const result = await db.runTransaction(async (transaction) => {
            const bookingDoc = await transaction.get(bookingRef);
            if (!bookingDoc.exists) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á");
            
            const bookingData = bookingDoc.data();
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á
            if (bookingData.userId !== userId) throw new Error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ");
            // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'pending' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            if (bookingData.status !== 'pending') throw new Error("‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ");

            transaction.update(bookingRef, {
                status: 'cancelled',
                cancellationInfo: { cancelledBy: 'customer', reason: 'Cancelled by customer.', timestamp: FieldValue.serverTimestamp() },
                updatedAt: FieldValue.serverTimestamp()
            });
            return { customerName: bookingData.customerInfo.name };
        });
        
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        const adminMessage = `üö´ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤\n\n*‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:* ${result.customerName}\n*Booking ID:* ${bookingId.substring(0, 6).toUpperCase()}`;
        await sendTelegramMessageToAdmin(adminMessage);
        
        return { success: true };
    } catch (error) {
        console.error("Error cancelling booking by user:", error);
        return { success: false, error: error.message };
    }
}

/**
 * (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô LINE ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ LIFF ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
 */
export async function sendInvoiceToCustomer(bookingId) {
    const bookingRef = db.collection('bookings').doc(bookingId);
    try {
        const bookingDoc = await bookingRef.get();
        if (!bookingDoc.exists) {
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á");
        }
        const bookingData = bookingDoc.data();

        // **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç** ‡∏™‡∏£‡πâ‡∏≤‡∏á LIFF URL ‡πÇ‡∏î‡∏¢‡∏°‡∏µ bookingId ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
        const liffUrl = `https://liff.line.me/${process.env.NEXT_PUBLIC_PAYMENT_LIFF_ID}/${bookingId}`;

        await bookingRef.update({
            'paymentInfo.paymentStatus': 'invoiced', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô '‡∏™‡πà‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß'
            updatedAt: FieldValue.serverTimestamp()
        });

        const customerMessage = `‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì ${bookingData.customerInfo.name},\n\n‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞: ${bookingData.paymentInfo.totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:\n${liffUrl}`;

        await sendLineMessage(bookingData.userId, customerMessage);

        return { success: true };
    } catch (error) {
        console.error("Error sending invoice:", error);
        return { success: false, error: error.message };
    }
}
/**
 * (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà) ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
 */
export async function confirmPayment(bookingId) {
    const bookingRef = db.collection('bookings').doc(bookingId);
    try {
        await bookingRef.update({
            'paymentInfo.paymentStatus': 'paid', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô 'paid'
            'paymentInfo.paidAt': FieldValue.serverTimestamp(), // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
            updatedAt: FieldValue.serverTimestamp()
        });
        return { success: true };
    } catch (error) {
        console.error("Error confirming payment:", error);
        return { success: false, error: error.message };
    }
}
